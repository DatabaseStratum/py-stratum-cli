<project name="PyStratum" default="build" basedir=".">
    <taskdef name="readSemanticVersion" classname="vendor.setbased.phing-extensions.src.Task.ReadSemanticVersionTask"/>
    <property name="BUILD_DIR" value="./build"/>

    <!-- Run composer update and executes various other updates -->
    <target name="composer-update">
        <exec command="composer update" checkreturn="true" passthru="true"/>
    </target>

    <!-- Install virtual environment -->
    <target name="venv">
        <delete dir="venv" quiet="true"/>
        <exec command="python3 -m venv venv" checkreturn="true" passthru="true"/>
        <exec command="./venv/bin/python -m pip install --upgrade pip" checkreturn="true" passthru="true"/>
        <exec command="./venv/bin/python -m pip install --upgrade pip-tools" checkreturn="true" passthru="true"/>
        <exec command="./venv/bin/python -m piptools compile --all-extras -o requirements.txt pyproject.toml"
              passthru="true" checkreturn="true"/>
        <exec command="./venv/bin/python -m pip install --upgrade -r requirements.txt" passthru="true"
              checkreturn="true"/>
    </target>

    <!-- Creates a new version/release. -->
    <!-- @todo replace semantic version with pep-396 -->
    <target name="version">
        <readSemanticVersion file=".version"
                             versionProperty="VERSION"
                             haltOnError="true"/>
        <reflexive>
            <fileset dir=".">
                <include name="pyproject.toml"/>
            </fileset>
            <filterchain>
                <replaceregexp>
                    <regexp pattern="version = .*" replace="version = &quot;${VERSION}&quot;"/>
                </replaceregexp>
            </filterchain>
        </reflexive>
        <reflexive>
            <fileset dir=".">
                <include name="pystratum_cli/application/StratumApplication.py"/>
            </fileset>
            <filterchain>
                <replaceregexp>
                    <regexp pattern="Application.__init__\(self, 'pystratum', .*"
                            replace="Application.__init__(self, 'pystratum', '${VERSION}')"/>
                </replaceregexp>
            </filterchain>
        </reflexive>
        <exec executable="git" checkreturn="true" passthru="true">
            <arg value="commit"/>
            <arg value="-a"/>
            <arg value="-m"/>
            <arg value="Release: ${VERSION}"/>
        </exec>
        <exec executable="git" checkreturn="true" passthru="true">
            <arg value="push"/>
        </exec>
        <exec executable="git" checkreturn="true" passthru="true">
            <arg value="tag"/>
            <arg value="${VERSION}"/>
        </exec>
        <exec executable="git" checkreturn="true" passthru="true">
            <arg value="push"/>
            <arg value="origin"/>
            <arg value="${VERSION}"/>
        </exec>
    </target>

    <!-- Creates a new distribution using pyproject.toml -->
    <target name="dist">
        <exec command="./venv/bin/python -m build" passthru="true" checkreturn="true"/>
    </target>

    <!-- Uploads a distribution to PyPI -->
    <target name="upload">
        <loadfile property="VERSION" file=".version"/>
        <exec command="./venv/bin/python -m twine upload dist/pystratum_cli-${VERSION}*" passthru="true"
              checkreturn="true"/>
    </target>

    <!-- All steps for releasing a new version -->
    <target name="release" depends="version,dist,upload"/>

    <!-- Runs all unit tests-->
    <target name="unit">
        <exec command="./venv/bin/python -m coverage run -m unittest discover -s test -p \*Test.py" passthru="true"
              checkreturn="true"/>
        <exec command="./venv/bin/python -m coverage html" passthru="true" checkreturn="true"/>
    </target>

    <!-- Default target -->
    <target name="build">
        <echo msg="And Now for Something Completely Different"/>
    </target>
</project>
